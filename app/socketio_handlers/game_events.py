# -*- coding: utf-8 -*-
"""
SocketIO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∫—É—Ä—å–µ—Ä–∞.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º.
"""

from flask_socketio import emit, disconnect, join_room, leave_room
from flask import request
import logging
import random
from app import socketio, db
from app.models import User, Order

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π WebSocket
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {session_id: user_data}
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
active_users = {}


@socketio.on('connect')
def handle_connect():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫ WebSocket.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """
    try:
        session_id = request.sid
        logger.info(f"üîå Client connected: {session_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
        emit('connection_established', {
            'status': 'connected', 
            'session_id': session_id
        })
    except Exception as e:
        logger.error(f"Error in connect handler: {str(e)}", exc_info=True)


@socketio.on('disconnect')
def handle_disconnect():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç WebSocket.
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏.
    """
    try:
        session_id = request.sid
        logger.info(f"üîå Client disconnected: {session_id}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        if session_id in active_users:
            user_data = active_users[session_id]
            logger.info(f"Removed user {user_data.get('user_id')} from active users")
            del active_users[session_id]
    except Exception as e:
        logger.error(f"Error in disconnect handler: {str(e)}", exc_info=True)


@socketio.on('user_login')
def handle_user_login(data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.
    
    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ —Å user_id –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        session_id = request.sid
        user_id = data.get('user_id')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user_id:
            emit('error', {'message': 'User ID is required'})
            return
        
        logger.info(f"üë§ User {user_id} logged in via WebSocket (session: {session_id})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        active_users[session_id] = {
            'user_id': user_id,
            'username': f'User_{user_id}',
            'rooms': [f'user_{user_id}']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        join_room(f'user_{user_id}')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
        emit('login_success', {
            'user_id': user_id, 
            'message': 'Login successful'
        })
    except Exception as e:
        logger.error(f"Error in user_login handler: {str(e)}", exc_info=True)
        emit('error', {'message': 'Login failed'})


@socketio.on('start_order_search')
def handle_start_order_search(data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞.
    
    Args:
        data (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (radius_km)
    """
    try:
        session_id = request.sid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if session_id not in active_users:
            emit('error', {'message': 'User not authenticated'})
            return
        
        user_data = active_users[session_id]
        user_id = user_data['user_id']
        radius_km = data.get('radius_km', 5)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –∫–º —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
        
        logger.info(f"üîç User {user_id} started order search (radius: {radius_km}km)")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        search_room = f'order_search_{user_id}'
        join_room(search_room)
        user_data['rooms'].append(search_room)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ü–ï–†–ï–î —Å–∏–º—É–ª—è—Ü–∏–µ–π
        emit('search_started', {
            'status': 'searching', 
            'radius_km': radius_km
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–∏—Å–∫–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å socketio.sleep)
        simulate_order_search_sync(user_id, radius_km)
        
    except Exception as e:
        logger.error(f"Error in start order search: {str(e)}", exc_info=True)
        emit('error', {'message': 'Failed to start order search'})


def simulate_order_search_sync(user_id: int, radius_km: float):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç socketio.sleep –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å eventlet/gevent.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        radius_km (float): –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    """
    try:
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –æ—Ç 5 –¥–æ 15 —Å–µ–∫—É–Ω–¥ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        search_time = random.randint(5, 15)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        for i in range(search_time):
            socketio.sleep(1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º socketio.sleep –≤–º–µ—Å—Ç–æ time.sleep
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            socketio.emit('search_progress', {
                'elapsed': i + 1,
                'total': search_time,
                'percentage': round(((i + 1) / search_time) * 100)
            }, room=f'order_search_{user_id}')
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        generate_order_for_user(user_id)
        
    except Exception as e:
        logger.error(f"Error in sync order search for user {user_id}: {str(e)}", exc_info=True)
        socketio.emit('error', {
            'message': 'Order search failed'
        }, room=f'order_search_{user_id}')


def generate_order_for_user(user_id: int):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ WebSocket.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–∏—Å–∫–∞.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    """
    try:
        from app.utils.game_helper import get_order_for_user
        
        logger.info(f"üì¶ Generating order for user {user_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
        order = get_order_for_user(user_id)
        
        if order:
            logger.info(f"‚úÖ Order {order.get('id')} created for user {user_id}")
            logger.debug(f"Order details: {order.get('pickup_name')} ‚Üí {order.get('dropoff_address')}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            socketio.emit("order_found", {
                "success": True,
                "order": order
            }, room=f"order_search_{user_id}")
            
            logger.info(f"üì§ Order sent to frontend for user {user_id}")
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤/–∑–¥–∞–Ω–∏–π)
            logger.warning(f"‚ùå No order generated for user {user_id}")
            socketio.emit("no_orders_found", {
                "message": "No orders available in your area. Try again later."
            }, room=f"order_search_{user_id}")
            
    except Exception as e:
        logger.error(f"Error generating order for user {user_id}: {str(e)}", exc_info=True)
        socketio.emit("error", {
            "message": "Failed to generate order"
        }, room=f"order_search_{user_id}")


@socketio.on('stop_order_search')
def handle_stop_order_search():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    try:
        session_id = request.sid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if session_id not in active_users:
            emit('error', {'message': 'User not authenticated'})
            return
        
        user_data = active_users[session_id]
        user_id = user_data['user_id']
        
        logger.info(f"üõë User {user_id} stopped order search")
        
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        search_room = f'order_search_{user_id}'
        leave_room(search_room)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if search_room in user_data['rooms']:
            user_data['rooms'].remove(search_room)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∏—Å–∫–∞
        emit('search_stopped', {
            'status': 'stopped',
            'message': 'Order search cancelled'
        })
        
    except Exception as e:
        logger.error(f"Error stopping order search: {str(e)}", exc_info=True)
        emit('error', {'message': 'Failed to stop order search'})


@socketio.on('update_position')
def handle_position_update(data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    
    Args:
        data (dict): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ (lat, lng, accuracy, timestamp)
    """
    try:
        session_id = request.sid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if session_id not in active_users:
            emit('error', {'message': 'User not authenticated'})
            return
        
        user_data = active_users[session_id]
        user_id = user_data['user_id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        lat = data.get('lat')
        lng = data.get('lng')
        accuracy = data.get('accuracy', 999)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if lat is None or lng is None:
            emit('error', {'message': 'Invalid position data'})
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = User.query.get(user_id)
        if user:
            user.update_position(lat, lng)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã –∑–∞–∫–∞–∑–∞ (pickup/dropoff) –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        from app.utils.game_helper import check_player_zones
        zones_status = check_player_zones(user_id, lat, lng)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–æ–Ω –¥–ª—è UI
        emit('position_updated', {
            'success': True,
            'zones': zones_status,
            'accuracy': accuracy
        })
        
        logger.debug(f"üìç Position updated for user {user_id}: ({lat:.6f}, {lng:.6f})")
        
    except Exception as e:
        logger.error(f"Error updating position: {str(e)}", exc_info=True)
        emit('error', {'message': 'Failed to update position'})