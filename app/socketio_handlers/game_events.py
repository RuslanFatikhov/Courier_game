# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ real-time –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Socket.IO.
"""

import random
import logging
from flask import request
from flask_socketio import emit, join_room, leave_room

from app import socketio, db
from app.models.user import User
from app.models.order import Order
from app.utils.game_helper import get_order_for_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π WebSocket
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {session_id: user_data}
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
active_users = {}


@socketio.on('connect')
def handle_connect():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫ WebSocket.
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    session_id = request.sid
    logger.info(f"üîå Client connected: {session_id}")


@socketio.on('disconnect')
def handle_disconnect():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç WebSocket.
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏.
    """
    try:
        session_id = request.sid
        logger.info(f"üîå Client disconnected: {session_id}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        if session_id in active_users:
            user_data = active_users[session_id]
            logger.info(f"Removed user {user_data.get('user_id')} from active users")
            del active_users[session_id]
    except Exception as e:
        logger.error(f"Error in disconnect handler: {str(e)}")


@socketio.on('user_login')
def handle_user_login(data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.
    
    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ —Å user_id –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        session_id = request.sid
        user_id = data.get('user_id')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user_id:
            emit('error', {'message': 'User ID is required'})
            return
        
        logger.info(f"üë§ User {user_id} logged in via WebSocket (session: {session_id})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        active_users[session_id] = {
            'user_id': user_id,
            'username': f'User_{user_id}',
            'rooms': [f'user_{user_id}'],
            'is_searching': False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        join_room(f'user_{user_id}')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
        emit('login_success', {
            'user_id': user_id, 
            'message': 'Login successful'
        })
    except Exception as e:
        logger.error(f"Error in user_login handler: {str(e)}", exc_info=True)
        emit('error', {'message': 'Login failed'})


@socketio.on('start_order_search')
def handle_start_order_search(data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞.
    
    Args:
        data (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (radius_km)
    """
    try:
        session_id = request.sid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if session_id not in active_users:
            emit('error', {'message': 'User not authenticated'})
            return
        
        user_data = active_users[session_id]
        user_id = user_data['user_id']
        
        # –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∏—Å–∫
        if user_data.get('is_searching', False):
            logger.warning(f"‚ö†Ô∏è User {user_id} tried to start search while already searching")
            emit('error', {'message': 'Search already in progress'})
            return
        
        radius_km = data.get('radius_km', 5)
        
        logger.info(f"üîç User {user_id} started order search (radius: {radius_km}km)")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        user_data['is_searching'] = True
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        search_room = f'order_search_{user_id}'
        join_room(search_room)
        if search_room not in user_data['rooms']:
            user_data['rooms'].append(search_room)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
        emit('search_started', {
            'status': 'searching', 
            'radius_km': radius_km
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–∏—Å–∫–∞
        simulate_order_search_sync(user_id, radius_km, session_id)
        
    except Exception as e:
        logger.error(f"Error in start order search: {str(e)}", exc_info=True)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if session_id in active_users:
            active_users[session_id]['is_searching'] = False
        emit('error', {'message': 'Failed to start order search'})


@socketio.on('stop_order_search')
def handle_stop_order_search():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞.
    """
    try:
        session_id = request.sid
        
        if session_id not in active_users:
            return
        
        user_data = active_users[session_id]
        user_id = user_data['user_id']
        
        logger.info(f"üõë User {user_id} stopped order search")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞
        user_data['is_searching'] = False
        
        # –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–∏—Å–∫–∞
        search_room = f'order_search_{user_id}'
        leave_room(search_room)
        if search_room in user_data['rooms']:
            user_data['rooms'].remove(search_room)
        
        emit('search_stopped', {'status': 'stopped'})
        
    except Exception as e:
        logger.error(f"Error stopping order search: {str(e)}", exc_info=True)


@socketio.on('update_position')
def handle_update_position(data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ë–î.
    
    Args:
        data (dict): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (lat, lng, accuracy)
    """
    try:
        session_id = request.sid
        
        if session_id not in active_users:
            return
        
        user_id = active_users[session_id]['user_id']
        lat = data.get('lat')
        lng = data.get('lng')
        
        if lat is None or lng is None:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
        user = User.query.get(user_id)
        if user:
            user.update_position(lat, lng)
        
    except Exception as e:
        logger.error(f"Error updating position: {str(e)}", exc_info=True)


def simulate_order_search_sync(user_id: int, radius_km: float, session_id: str):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç socketio.sleep –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å eventlet/gevent.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        radius_km (float): –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        session_id (str): ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if session_id not in active_users or not active_users[session_id].get('is_searching'):
            logger.info(f"Search cancelled for user {user_id}")
            return
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –æ—Ç 5 –¥–æ 15 —Å–µ–∫—É–Ω–¥
        search_time = random.randint(5, 15)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        for i in range(search_time):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if session_id not in active_users or not active_users[session_id].get('is_searching'):
                logger.info(f"Search cancelled for user {user_id} at {i+1}/{search_time}s")
                return
            
            socketio.sleep(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            socketio.emit('search_progress', {
                'elapsed': i + 1,
                'total': search_time,
                'percentage': round(((i + 1) / search_time) * 100)
            }, room=f'order_search_{user_id}')
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        generate_order_for_user(user_id)
        
    except Exception as e:
        logger.error(f"Error in sync order search for user {user_id}: {str(e)}", exc_info=True)
        socketio.emit('error', {
            'message': 'Order search failed'
        }, room=f'user_{user_id}')
    finally:
        # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if session_id in active_users:
            active_users[session_id]['is_searching'] = False
            logger.info(f"‚úÖ Search flag reset for user {user_id}")


def generate_order_for_user(user_id: int):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = User.query.get(user_id)
        if not user:
            logger.error(f"User {user_id} not found")
            socketio.emit('no_orders_found', {
                'message': 'User not found'
            }, room=f'user_{user_id}')
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑—É—è helper
        order_data = get_order_for_user(user_id)
        
        if order_data:
            logger.info(f"‚úÖ Order generated for user {user_id}: {order_data['id']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É
            socketio.emit('order_found', {
                'order': order_data,
                'message': 'Order found!'
            }, room=f'user_{user_id}')
        else:
            logger.warning(f"No orders available for user {user_id}")
            
            # –°–æ–æ–±—â–∞–µ–º —á—Ç–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            socketio.emit('no_orders_found', {
                'message': 'No orders available in your area. Try again later.'
            }, room=f'user_{user_id}')
            
    except Exception as e:
        logger.error(f"Error generating order for user {user_id}: {str(e)}", exc_info=True)
        socketio.emit('error', {
            'message': 'Failed to generate order'
        }, room=f'user_{user_id}')
