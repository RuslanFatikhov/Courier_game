#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (healthcheck).
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/healthcheck.py
    
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    0 - –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    1 - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    env_path = project_root / '.env'
    if not env_path.exists():
        return False, "‚ö†Ô∏è  .env file not found. Copy .env.example to .env"
    return True, "‚úÖ .env file exists"


def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GeoJSON —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    restaurants_path = project_root / 'data' / 'restaurants.geojson'
    buildings_path = project_root / 'data' / 'buildings.geojson'
    
    if not restaurants_path.exists():
        issues.append("‚ö†Ô∏è  restaurants.geojson not found in data/")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
        try:
            with open(restaurants_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                count = len(data.get('features', []))
                issues.append(f"‚úÖ restaurants.geojson found ({count} restaurants)")
        except json.JSONDecodeError:
            issues.append("‚ùå restaurants.geojson is not valid JSON")
    
    if not buildings_path.exists():
        issues.append("‚ö†Ô∏è  buildings.geojson not found in data/")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
        try:
            with open(buildings_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                count = len(data.get('features', []))
                issues.append(f"‚úÖ buildings.geojson found ({count} buildings)")
        except json.JSONDecodeError:
            issues.append("‚ùå buildings.geojson is not valid JSON")
    
    has_errors = any('‚ùå' in issue for issue in issues)
    return not has_errors, '\n'.join(issues)


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app import create_app, db
        
        app = create_app()
        with app.app_context():
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            db.session.execute(db.text('SELECT 1'))
            return True, "‚úÖ Database connection successful"
    except Exception as e:
        return False, f"‚ùå Database connection failed: {str(e)}"


def check_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –ë–î"""
    try:
        from app import create_app, db
        from app.models import User, Order, Report
        
        app = create_app()
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            
            required_tables = ['users', 'orders', 'reports']
            missing_tables = [t for t in required_tables if t not in tables]
            
            if missing_tables:
                return False, f"‚ùå Missing tables: {', '.join(missing_tables)}"
            
            return True, f"‚úÖ All tables exist ({len(tables)} total)"
    except Exception as e:
        return False, f"‚ùå Models check failed: {str(e)}"


def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        from app import create_app
        
        app = create_app()
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not app.config.get('SECRET_KEY') or app.config['SECRET_KEY'] == 'dev-secret-key':
            issues.append("‚ö†Ô∏è  SECRET_KEY is using default value (insecure for production)")
        else:
            issues.append("‚úÖ SECRET_KEY is configured")
        
        if not app.config.get('MAPBOX_ACCESS_TOKEN'):
            issues.append("‚ùå MAPBOX_ACCESS_TOKEN is not set")
        else:
            issues.append("‚úÖ MAPBOX_ACCESS_TOKEN is configured")
        
        if app.config.get('SQLALCHEMY_DATABASE_URI'):
            issues.append("‚úÖ Database URI is configured")
        else:
            issues.append("‚ùå Database URI is not set")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        game_config = app.config.get('GAME_CONFIG', {})
        if game_config:
            issues.append(f"‚úÖ Game config loaded ({len(game_config)} parameters)")
        else:
            issues.append("‚ö†Ô∏è  Game config is empty")
        
        has_errors = any('‚ùå' in issue for issue in issues)
        return not has_errors, '\n'.join(issues)
    except Exception as e:
        return False, f"‚ùå Config check failed: {str(e)}"


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        required_packages = [
            'flask',
            'flask_sqlalchemy',
            'flask_socketio',
            'flask_cors',
            'python-dotenv'
        ]
        
        issues = []
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
                issues.append(f"‚úÖ {package}")
            except ImportError:
                issues.append(f"‚ùå {package} not installed")
        
        has_errors = any('‚ùå' in issue for issue in issues)
        return not has_errors, '\n'.join(issues)
    except Exception as e:
        return False, f"‚ùå Dependencies check failed: {str(e)}"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    print("=" * 60)
    print("üè• COURIER SIMULATOR - HEALTH CHECK")
    print("=" * 60)
    print()
    
    checks = [
        ("Environment File", check_env_file),
        ("Data Files", check_data_files),
        ("Dependencies", check_dependencies),
        ("Configuration", check_config),
        ("Database", check_database),
        ("Models", check_models),
    ]
    
    results = []
    all_passed = True
    
    for check_name, check_func in checks:
        print(f"üìã Checking {check_name}...")
        try:
            passed, message = check_func()
            results.append((check_name, passed, message))
            print(f"   {message}")
            if not passed:
                all_passed = False
        except Exception as e:
            results.append((check_name, False, f"‚ùå Unexpected error: {str(e)}"))
            print(f"   ‚ùå Unexpected error: {str(e)}")
            all_passed = False
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 60)
    print("üìä SUMMARY")
    print("=" * 60)
    
    passed_count = sum(1 for _, passed, _ in results if passed)
    total_count = len(results)
    
    for check_name, passed, _ in results:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status} - {check_name}")
    
    print()
    print(f"Result: {passed_count}/{total_count} checks passed")
    
    if all_passed:
        print("\n‚úÖ All checks passed! System is healthy.")
        return 0
    else:
        print("\n‚ùå Some checks failed. Please review the issues above.")
        return 1


if __name__ == "__main__":
    sys.exit(main())