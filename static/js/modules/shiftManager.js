/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
 */
class ShiftManager {
  constructor(gameState, socketManager) {
    this.gameState = gameState;
    this.socketManager = socketManager;
    this.lastButtonState = null; // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    this.zoneCheckInterval = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω
    this.SHIFT_STATES = {
      REQUESTING_GPS: 'requesting_gps',
      START_SHIFT: 'start_shift',
      END_SHIFT: 'end_shift', 
      SEARCHING: 'searching',
      TO_PICKUP: 'to_pickup',
      AT_PICKUP: 'at_pickup',      // –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å - –≤ –∑–æ–Ω–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
      TO_DROPOFF: 'to_dropoff',
      AT_DROPOFF: 'at_dropoff'     // –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å - –≤ –∑–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
    };
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–º–µ–Ω—ã
  async handleShiftButtonClick() {
    console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–º–µ–Ω—ã");
    
    const button = document.getElementById("startGame");
    const buttonText = button?.querySelector("h3")?.textContent;
    
    console.log("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:", buttonText);
    
    try {
      // 1. –ï—Å–ª–∏ –Ω–µ—Ç GPS - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
      if (!window.geoManager?.currentPosition) {
        console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPS...");
        this.updateShiftButton('REQUESTING_GPS_ACTIVE');
        
        try {
          await window.geoManager.requestPermission();
        } catch (error) {
          console.error("GPS –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω:", error);
        }
        return;
      }
      
      // 2. –ï—Å–ª–∏ —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞ - –Ω–∞—á–∏–Ω–∞–µ–º
      if (!this.gameState.isOnShift) {
        console.log("‚Üí –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É");
        await this.startShift();
        return;
      }
      
      // 3. –ï—Å–ª–∏ –∏–¥–µ—Ç –ø–æ–∏—Å–∫ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      if (this.gameState.isSearching) {
        console.log("‚Üí –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫");
        await this.stopSearching();
        return;
      }
      
      // 4. –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      if (this.gameState.currentOrder) {
        const order = this.gameState.currentOrder;
        
        // 4a. –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑" - –≤—ã–ø–æ–ª–Ω—è–µ–º pickup
        if (buttonText === "–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑") {
          console.log("‚Üí –ó–∞–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑");
          await this.pickupOrder();
          return;
        }
        
        // 4b. –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑" - –≤—ã–ø–æ–ª–Ω—è–µ–º delivery
        if (buttonText === "–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑") {
          console.log("‚Üí –î–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑");
          await this.deliverOrder();
          return;
        }
        
        // 4c. –ò–Ω–∞—á–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        console.log("‚Üí –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∑–∞–∫–∞–∑—É");
        this.openNavigation();
        return;
      }
      
      // 5. –ò–Ω–∞—á–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
      console.log("‚Üí –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É");
      await this.endShift();
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞:", error);
      
      if (!window.geoManager?.currentPosition) {
        this.updateShiftButton(this.SHIFT_STATES.REQUESTING_GPS);
      } else if (!this.gameState.isOnShift) {
        this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
      }
    }
  }

  // –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
  async startShift() {
    console.log("–ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É");
    
    if (!window.geoManager?.currentPosition) {
      throw new Error("GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    try {
      const response = await fetch('/api/start_shift', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: this.gameState.userId
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É');
      }

      this.gameState.setShiftStatus(true);
      console.log("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞");
      
      window.geoManager.startTracking((position) => {
        this.sendPositionUpdate(position);
      });

      this.socketManager.loginUser(this.gameState.userId);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–æ–Ω
      this.startZoneChecking();
      
      setTimeout(() => {
        this.startSearching();
      }, 500);
      
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  async stopSearching() {
    console.log("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫");
    
    this.gameState.setSearchingStatus(false);
    this.updateShiftButton(this.SHIFT_STATES.END_SHIFT);
    
    this.socketManager.stopOrderSearch();
  }

  // –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  async startSearching() {
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤");
    
    this.gameState.setSearchingStatus(true);
    this.updateShiftButton(this.SHIFT_STATES.SEARCHING);
    
    this.socketManager.startOrderSearch(5);
  }

  // –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã
  async endShift() {
    console.log("–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–º–µ–Ω—É");
    
    if (this.gameState.currentOrder) {
      if (!confirm("–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?")) {
        return;
      }
    }

    try {
      const response = await fetch('/api/stop_shift', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: this.gameState.userId
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É');
      }

      this.gameState.setShiftStatus(false);
      this.gameState.setSearchingStatus(false);
      this.gameState.setCurrentOrder(null);
      
      window.geoManager.stopTracking();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–æ–Ω
      this.stopZoneChecking();
      
      if (window.mapManager) {
        window.mapManager.clearOrderMarkers();
      }
      
      this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
      
      console.log("‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: ' + error.message);
    }
  }

  // –ó–∞–±–æ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
  async pickupOrder() {
    console.log("–í—ã–ø–æ–ª–Ω—è–µ–º pickup –∑–∞–∫–∞–∑–∞");
    
    try {
      const response = await fetch('/api/order/pickup', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({user_id: this.gameState.userId})
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω:", result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const updatedOrder = result.order;
        updatedOrder.pickup_time = result.order.pickup_time;
        this.gameState.setCurrentOrder(updatedOrder);
        
        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–ö –∫–ª–∏–µ–Ω—Ç—É"
        this.updateShiftButton(this.SHIFT_STATES.TO_DROPOFF);
        
        alert("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É.");
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞: " + result.error);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ pickup:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞: " + error.message);
    }
  }

  // –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É
  async deliverOrder() {
    console.log("–í—ã–ø–æ–ª–Ω—è–µ–º delivery –∑–∞–∫–∞–∑–∞");
    
    try {
      const response = await fetch('/api/order/deliver', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({user_id: this.gameState.userId})
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω:", result);
        
        const deliveryResult = result.delivery_result;
        const payout = deliveryResult.payout;
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
        this.gameState.setCurrentOrder(null);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–æ–Ω
        this.stopZoneChecking();
        
        // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
        if (window.mapManager) {
          window.mapManager.clearOrderMarkers();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const bonusText = payout.on_time ? `\nüéâ –ë–æ–Ω—É—Å –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å: $${payout.bonus_amount}` : '';
        alert(
          `‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n` +
          `üí∞ –í—ã–ø–ª–∞—Ç–∞: $${payout.total}${bonusText}\n` +
          `üì¶ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: $${result.new_balance}\n` +
          `‚è±Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${Math.floor(deliveryResult.delivery_duration / 60)} –º–∏–Ω`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ UI
        const balanceEl = document.getElementById('balanceAmount');
        if (balanceEl) {
          balanceEl.textContent = result.new_balance.toFixed(2);
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        setTimeout(() => {
          this.startSearching();
        }, 1000);
        
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞: " + result.error);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ delivery:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: " + error.message);
    }
  }

  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω
  startZoneChecking() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    this.stopZoneChecking();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    this.zoneCheckInterval = setInterval(() => {
      this.checkZones();
    }, 2000);
    
    console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –∑–∞–ø—É—â–µ–Ω–∞");
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω
  stopZoneChecking() {
    if (this.zoneCheckInterval) {
      clearInterval(this.zoneCheckInterval);
      this.zoneCheckInterval = null;
      console.log("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  async checkZones() {
    if (!this.gameState.currentOrder || !window.geoManager?.currentPosition) {
      return;
    }
    
    const pos = window.geoManager.getCurrentPosition();
    
    try {
      const response = await fetch('/api/position', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          user_id: this.gameState.userId,
          lat: pos.lat,
          lng: pos.lng,
          accuracy: pos.accuracy
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        const zones = result.zones;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–æ–Ω—ã
        const order = this.gameState.currentOrder;
        
        if (!order.pickup_time) {
          // –ï–¥–µ–º –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
          if (zones.in_pickup_zone && zones.can_pickup) {
            this.updateShiftButton(this.SHIFT_STATES.AT_PICKUP);
          } else {
            this.updateShiftButton(this.SHIFT_STATES.TO_PICKUP);
          }
        } else {
          // –ï–¥–µ–º –∫ –∫–ª–∏–µ–Ω—Ç—É
          if (zones.in_dropoff_zone && zones.can_deliver) {
            this.updateShiftButton(this.SHIFT_STATES.AT_DROPOFF);
          } else {
            this.updateShiftButton(this.SHIFT_STATES.TO_DROPOFF);
          }
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω:", error);
    }
  }

  // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Ç–æ—á–∫–µ
  openNavigation() {
    const order = this.gameState.currentOrder;
    if (!order) {
      console.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
      return;
    }
    
    let target, targetName;
    if (!order.pickup_time) {
      target = order.pickup;
      targetName = order.pickup.name;
    } else {
      target = order.dropoff;
      targetName = order.dropoff.address;
    }
    
    const lat = target.lat;
    const lng = target.lng;
    
    console.log("–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫:", targetName);
    
    const url = `https://2gis.kz/almaty/directions/points/${lng},${lat}`;
    window.open(url, '_blank');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã
  updateShiftButton(state) {
    const button = document.getElementById("startGame");
    const buttonText = button?.querySelector("h3");
    
    if (!button || !buttonText) return;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (this.lastButtonState !== state) {
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Üí", state);
      this.lastButtonState = state;
    }
    
    switch (state) {
      case this.SHIFT_STATES.REQUESTING_GPS:
        buttonText.textContent = "–†–∞–∑—Ä–µ—à–∏—Ç—å GPS";
        button.style.backgroundColor = "#ff6600";
        button.disabled = false;
        break;
        
      case 'REQUESTING_GPS_ACTIVE':
        buttonText.textContent = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPS...';
        button.style.backgroundColor = "#ff8800";
        button.disabled = true;
        break;
        
      case this.SHIFT_STATES.START_SHIFT:
        buttonText.textContent = "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É";
        button.style.backgroundColor = "#121212";
        button.disabled = false;
        break;
        
      case this.SHIFT_STATES.END_SHIFT:
        buttonText.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É";
        button.style.backgroundColor = "#ff4444";
        button.disabled = false;
        break;
        
      case this.SHIFT_STATES.SEARCHING:
        buttonText.textContent = '–ò—â–µ–º –∑–∞–∫–∞–∑—ã...';
        button.style.backgroundColor = "#00aa44";
        button.disabled = false;
        break;
        
      case this.SHIFT_STATES.TO_PICKUP:
        buttonText.textContent = '–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É';
        button.style.backgroundColor = "#007cbf";
        button.disabled = false;
        break;
        
      case this.SHIFT_STATES.AT_PICKUP:
        buttonText.textContent = '–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑';
        button.style.backgroundColor = "#00aa44";
        button.disabled = false;
        break;
        
      case this.SHIFT_STATES.TO_DROPOFF:
        buttonText.textContent = '–ö –∫–ª–∏–µ–Ω—Ç—É';
        button.style.backgroundColor = "#9b59b6";
        button.disabled = false;
        break;
        
      case this.SHIFT_STATES.AT_DROPOFF:
        buttonText.textContent = '–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑';
        button.style.backgroundColor = "#ff4444";
        button.disabled = false;
        break;
        
      case 'UNSUPPORTED':
        buttonText.textContent = "GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        button.style.backgroundColor = "#666666";
        button.disabled = true;
        break;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  sendPositionUpdate(position) {
    this.socketManager.sendPositionUpdate(position);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ GPS —Å–æ–±—ã—Ç–∏–π
  onGPSPermissionGranted(position) {
    console.log("GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ");
    
    if (window.mapManager) {
      window.mapManager.setView(position.coords, 16);
      window.mapManager.addUserMarker(position.coords);
    }
    
    this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
  }

  onGPSPermissionDenied(error) {
    console.error("GPS –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:", error);
    this.updateShiftButton(this.SHIFT_STATES.REQUESTING_GPS);
  }

  onPositionUpdate(position) {
    if (window.mapManager) {
      window.mapManager.updateUserMarker(position.coords);
    }
  }
}

window.ShiftManager = ShiftManager;
