// static/js/game.js

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ–π, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let map = null;
let geoManager = null;
let gameState = {
  isOnShift: false,
  isSearching: false,
  currentOrder: null,
  userId: 1 // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
};

// –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.gameState = gameState;
window.geoManager = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã
const SHIFT_STATES = {
  REQUESTING_GPS: 'requesting_gps',
  START_SHIFT: 'start_shift',
  END_SHIFT: 'end_shift', 
  SEARCHING: 'searching'
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
 */
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Mapbox
  if (typeof mapboxgl === "undefined") {
    console.error("‚ùå Mapbox GL –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.");
    showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GeolocationManager
  if (typeof GeolocationManager === "undefined") {
    console.error("‚ùå GeolocationManager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
    showError("–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏");
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  initializeMap();
  initializeGeolocation();
  initializeUI();
  initializeSocketEvents();
  
  console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã Mapbox
 */
function initializeMap() {
  console.log("üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã");
  
  map = new mapboxgl.Map({
    container: "map",
    style: "mapbox://styles/mapbox/streets-v11",
    center: [76.8897, 43.2389], // –ê–ª–º–∞—Ç—ã
    zoom: 12,
    attributionControl: false // –£–±–∏—Ä–∞–µ–º attribution –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
  map.addControl(new mapboxgl.NavigationControl(), 'top-right');
  
  map.on('load', () => {
    console.log("‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
  });

  map.on('error', (e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã:", e);
    showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã");
  });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 */
function initializeGeolocation() {
  console.log("üìç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏");
  
  geoManager = new GeolocationManager();
  
  // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  window.geoManager = geoManager;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (!geoManager.isSupported()) {
    showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
    updateShiftButton('UNSUPPORTED');
    return;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callbacks
  geoManager.onPermissionGranted = onGPSPermissionGranted;
  geoManager.onPermissionDenied = onGPSPermissionDenied;
  geoManager.onPositionUpdate = onPositionUpdate;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ GPS
  updateShiftButton(SHIFT_STATES.REQUESTING_GPS);
  console.log("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—Ä–æ—Å—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è");
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function initializeUI() {
  console.log("üñ±Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI");
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã
  const startGameButton = document.getElementById("startGame");
  if (startGameButton) {
    startGameButton.addEventListener("click", handleShiftButtonClick);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª–æ–∫
  initializeModals();
  
  // –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const myLocationButton = document.querySelector(".myloc");
  if (myLocationButton) {
    myLocationButton.addEventListener("click", centerOnUser);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SocketIO —Å–æ–±—ã—Ç–∏–π
 */
function initializeSocketEvents() {
  console.log("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–±—ã—Ç–∏–π");
  
  if (!window.__socket) {
    console.warn("‚ö†Ô∏è Socket.IO –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
    return;
  }

  // –°–æ–±—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  window.__socket.on("search_started", onSearchStarted);
  window.__socket.on("search_progress", onSearchProgress);  
  window.__socket.on("order_found", onOrderFound);
  window.__socket.on("no_orders_found", onNoOrdersFound);
  window.__socket.on("search_error", onSearchError);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–º–µ–Ω—ã
 */
async function handleShiftButtonClick() {
  console.log("üîÑ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–º–µ–Ω—ã, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", gameState.isOnShift);
  
  const button = document.getElementById("startGame");
  
  try {
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å GPS
    if (!geoManager.currentPosition) {
      console.log("üìç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ GPS...");
      updateShiftButton('REQUESTING_GPS_ACTIVE');
      
      try {
        await geoManager.requestPermission();
        // onGPSPermissionGranted —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      } catch (error) {
        console.error("‚ùå GPS –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω:", error);
        // onGPSPermissionDenied —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      }
      return;
    }
    
    // –ï—Å–ª–∏ GPS –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã
    if (!gameState.isOnShift) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É
      await startShift();
    } else if (gameState.isSearching) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
      await stopSearching();
    } else {
      // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–º–µ–Ω—É
      await endShift();
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞:", error);
    showError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + error.message);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    if (!geoManager.currentPosition) {
      updateShiftButton(SHIFT_STATES.REQUESTING_GPS);
    } else if (!gameState.isOnShift) {
      updateShiftButton(SHIFT_STATES.START_SHIFT);
    }
  }
}

/**
 * –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
 */
async function startShift() {
  console.log("‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ GPS –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!geoManager.currentPosition) {
    throw new Error("GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.");
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  try {
    console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/start_shift –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", gameState.userId);
    
    const response = await fetch('/api/start_shift', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: gameState.userId
      })
    });

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);

    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
        console.error("‚ùå –û—à–∏–±–∫–∞ API:", errorData);
      } catch (e) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏:", e);
        errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
      }
      throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É');
    }

    const result = await response.json();
    console.log("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å:", result);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.isOnShift = true;
    saveGameState();    
    // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    geoManager.startTracking((position) => {
      sendPositionUpdate(position);
    });

    // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º SocketIO –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º –ø–æ–∏—Å–∫–∞
    if (window.__socket) {
      window.__socket.emit('user_login', { user_id: gameState.userId });
      
      // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
      setTimeout(() => {
        startSearching();
      }, 500);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç SocketIO, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
      startSearching();
    }

    showSuccess("–°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò—â–µ–º –∑–∞–∫–∞–∑—ã...");
    
  } catch (error) {
    console.error("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ startShift:", error);
    throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message);
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
 */
async function stopSearching() {
  console.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫");
  
  gameState.isSearching = false;
    saveGameState();  updateShiftButton(SHIFT_STATES.END_SHIFT);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
  if (window.__socket) {
    window.__socket.emit('stop_order_search');
  }
}

/**
 * –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
 */
async function startSearching() {
  console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤");
  
  gameState.isSearching = true;
    saveGameState();  updateShiftButton(SHIFT_STATES.SEARCHING);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
  if (window.__socket) {
    window.__socket.emit('start_order_search', { 
      radius_km: 5 
    });
  }
}

/**
 * –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã
 */
async function endShift() {
  console.log("‚èπÔ∏è –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–º–µ–Ω—É");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  if (gameState.currentOrder) {
    if (!confirm("–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É?")) {
      return;
    }
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch('/api/stop_shift', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: gameState.userId
      })
    });

    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.isOnShift = false;
    saveGameState();    gameState.isSearching = false;
    saveGameState();    gameState.currentOrder = null;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    geoManager.stopTracking();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateShiftButton(SHIFT_STATES.START_SHIFT);
    
    console.log("‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    showSuccess("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: ' + error.message);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
function updateShiftButton(state) {
  const button = document.getElementById("startGame");
  const buttonText = button.querySelector("h3");
  
  if (!button || !buttonText) return;
  
  switch (state) {
    case SHIFT_STATES.REQUESTING_GPS:
      buttonText.textContent = "–†–∞–∑—Ä–µ—à–∏—Ç—å GPS";
      button.style.backgroundColor = "#ff6600";
      button.disabled = false;
      break;
      
    case 'REQUESTING_GPS_ACTIVE':
      buttonText.innerHTML = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPS... <span class="loading-indicator"></span>';
      button.style.backgroundColor = "#ff8800";
      button.disabled = true;
      break;
      
    case SHIFT_STATES.START_SHIFT:
      buttonText.textContent = "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É";
      button.style.backgroundColor = "#121212";
      button.disabled = false;
      break;
      
    case SHIFT_STATES.END_SHIFT:
      buttonText.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É";
      button.style.backgroundColor = "#ff4444";
      button.disabled = false;
      break;
      
    case SHIFT_STATES.SEARCHING:
      buttonText.innerHTML = '–ò—â–µ–º –∑–∞–∫–∞–∑—ã... <span class="loading-indicator"></span>';
      button.style.backgroundColor = "#00aa44";
      button.disabled = false;
      break;
      
    case 'UNSUPPORTED':
      buttonText.textContent = "GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
      button.style.backgroundColor = "#666666";
      button.disabled = true;
      break;
      
    default:
      console.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:", state);
  }
}

/**
 * Callback –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS
 */
function onGPSPermissionGranted(position) {
  console.log("‚úÖ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ");
  
  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (map) {
    map.setCenter([position.coords.longitude, position.coords.latitude]);
    map.setZoom(16);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addUserMarker(position.coords);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
  updateShiftButton(SHIFT_STATES.START_SHIFT);
  
  showSuccess("GPS –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
}

/**
 * Callback –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ GPS
 */
function onGPSPermissionDenied(error) {
  console.error("‚ùå GPS –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:", error);
  
  let message = "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é";
  
  if (error.code === error.PERMISSION_DENIED) {
    message += ". –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.";
  }
  
  showError(message);
  
  // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ GPS
  updateShiftButton(SHIFT_STATES.REQUESTING_GPS);
}

/**
 * Callback –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
 */
function onPositionUpdate(position) {
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ
  updateUserMarker(position.coords);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ GPS
  const quality = geoManager.getGPSQuality();
  if (quality === 'poor') {
    console.warn("‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ GPS —Å–∏–≥–Ω–∞–ª–∞");
  }
}

/**
/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É
 */
function addUserMarker(coords) {
  if (!map) return;

  // Ensure userMarker is declared on window
  if (!('userMarker' in window)) {
    window.userMarker = undefined;
  }
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
  if (window.userMarker) {
    window.userMarker.remove();
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
  window.userMarker = new mapboxgl.Marker({
    color: '#007cbf',
    scale: 0.8
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function updateUserMarker(coords) {
  // Ensure userMarker is declared on window
  if (!('userMarker' in window)) {
    window.userMarker = undefined;
  }
  if (window.userMarker) {
    window.userMarker.setLngLat([coords.longitude, coords.latitude]);
  }
}
  if (window.userMarker) {
    window.userMarker.setLngLat([coords.longitude, coords.latitude]);
  }
}

/**
 * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function centerOnUser() {
  if (!geoManager.currentPosition || !map) return;
  
  const pos = geoManager.getCurrentPosition();
  map.easeTo({
    center: [pos.lng, pos.lat],
    zoom: 16,
    duration: 1000
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
function sendPositionUpdate(position) {
  if (!window.__socket) return;
  
  const coords = position.coords;
  window.__socket.emit('update_position', {
    lat: coords.latitude,
function onSearchStarted() {
  console.log("üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞—á–∞–ª—Å—è");
  updateShiftButton(SHIFT_STATES.SEARCHING);
}
}

// === SocketIO Event Handlers ===

function onSearchStarted(data) {
  console.log("üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞—á–∞–ª—Å—è");
  updateShiftButton(SHIFT_STATES.SEARCHING);
}

function onSearchProgress(data) {
  console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞: ${data.elapsed}/${data.total}`);
  
  const button = document.getElementById("startGame");
  const buttonText = button.querySelector("h3");
  if (buttonText) {
    buttonText.textContent = `–ü–æ–∏—Å–∫... ${data.elapsed}/${data.total}—Å`;
  }
}

function onOrderFound(data) {
  console.log("‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:", data.order);
  
  gameState.currentOrder = data.order;
  gameState.isSearching = false;
    saveGameState();  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ
  showOrderOnMap(data.order);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–∫–∞–∑–æ–º
  showOrderModal(data.order);
}

function onNoOrdersFound(data) {
  console.log("‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:", data.message);
  
  gameState.isSearching = false;
    saveGameState();  updateShiftButton(SHIFT_STATES.END_SHIFT);
  
  showWarning("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
}

function onSearchError(data) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", data.message);
  
  gameState.isSearching = false;
    saveGameState();  updateShiftButton(SHIFT_STATES.END_SHIFT);
  
  showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤: " + data.message);
}

// === UI Helper Functions ===

/**
 * –ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
 */
function showOrderOnMap(order) {
  if (!map) return;
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤
  clearOrderMarkers();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (pickup)
  const pickupMarker = new mapboxgl.Marker({
    color: '#00aa44', // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è pickup
    scale: 1.2
  })
  .setLngLat([order.pickup.lng, order.pickup.lat])
  .setPopup(new mapboxgl.Popup({ offset: 25 })
    .setHTML(`<h3>üì¶ –ó–∞–±—Ä–∞—Ç—å</h3><p>${order.pickup?.name || "–†–µ—Å—Ç–æ—Ä–∞–Ω"}</p>`))
  .addTo(map);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∑–¥–∞–Ω–∏—è (dropoff)
  const dropoffMarker = new mapboxgl.Marker({
    color: '#ff4444', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è dropoff
    scale: 1.2
  })
  .setLngLat([order.dropoff.lng, order.dropoff.lat])
  .setPopup(new mapboxgl.Popup({ offset: 25 })
    .setHTML(`<h3>üè† –î–æ—Å—Ç–∞–≤–∏—Ç—å</h3><p>${order.dropoff?.address || "–ê–¥—Ä–µ—Å"}</p>`))
  .addTo(map);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  window.orderMarkers = [pickupMarker, dropoffMarker];
  
  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
  const bounds = new mapboxgl.LngLatBounds();
  bounds.extend([order.pickup.lng, order.pickup.lat]);
  bounds.extend([order.dropoff.lng, order.dropoff.lat]);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
  const userPos = geoManager.getCurrentPosition();
  if (userPos) {
    bounds.extend([userPos.lng, userPos.lat]);
  }
  
  map.fitBounds(bounds, { padding: 80 });
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
 */
function clearOrderMarkers() {
  if (window.orderMarkers) {
    window.orderMarkers.forEach(marker => marker.remove());
    window.orderMarkers = [];
  }
}

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∑–∞–∫–∞–∑–æ–º
 */
function showOrderModal(order) {
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  let orderModal = document.getElementById('orderModal');
  if (!orderModal) {
    orderModal = createOrderModal();
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
  updateOrderModal(order);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
  orderModal.style.display = 'flex';
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫–∞–∑–∞
 */
function createOrderModal() {
  const modal = document.createElement('div');
  modal.id = 'orderModal';
  modal.className = 'modal';
  
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal_header">
        <h3 class="black100">–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</h3>
        <span class="icon_button graybg close" onclick="closeOrderModal()">
          <img src="/static/img/icon/cross.svg" alt="Close" class="icon">
        </span>
      </div>
      
      <div style="padding: 16px; flex: 1; overflow-y: auto;">
        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ -->
        <div style="margin-bottom: 20px;">
          <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
            <img src="/static/img/icon/bag.svg" alt="Pickup" style="width: 20px; height: 20px;">
            <h4 class="black100">–ó–∞–±—Ä–∞—Ç—å –∏–∑</h4>
          </div>
          <p id="orderPickupName" style="margin-left: 28px; color: #666;"></p>
        </div>
        
        <div style="margin-bottom: 20px;">
          <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
            <img src="/static/img/icon/home.svg" alt="Dropoff" style="width: 20px; height: 20px;">
            <h4 class="black100">–î–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É</h4>
          </div>
          <p id="orderDropoffAddress" style="margin-left: 28px; color: #666;"></p>
        </div>
        
        <!-- –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ -->
        <div style="background: #f8f9fa; border-radius: 12px; padding: 16px; margin-bottom: 20px;">
          <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
            <span style="display: flex; align-items: center; gap: 6px;">
              <img src="/static/img/icon/distance.svg" alt="Distance" style="width: 16px; height: 16px;">
              –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            </span>
            <span id="orderDistance" style="font-weight: 600;"></span>
          </div>
          
          <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
            <span style="display: flex; align-items: center; gap: 6px;">
              <img src="/static/img/icon/time.svg" alt="Time" style="width: 16px; height: 16px;">
              –í—Ä–µ–º—è
            </span>
            <span id="orderTime" style="font-weight: 600;"></span>
          </div>
          
          <div style="display: flex; justify-content: space-between;">
            <span style="font-weight: 600;">–û–ø–ª–∞—Ç–∞</span>
            <span id="orderAmount" style="font-weight: 700; color: #00aa44;"></span>
          </div>
        </div>
        
        <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
        <div style="display: flex; gap: 12px;">
          <button onclick="closeOrderModal()" style="flex: 1; padding: 14px; border: 2px solid #ddd; border-radius: 12px; background: white; color: #666; font-weight: 600;">
            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
          </button>
          <button onclick="acceptOrder()" style="flex: 2; padding: 14px; border: none; border-radius: 12px; background: #00aa44; color: white; font-weight: 600;">
            –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
          </button>
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  return modal;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã–º–∏
 */
function updateOrderModal(order) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è pickup.name –∏ dropoff.address
  const pickupName = order.pickup?.name || order.pickup_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω';
  const dropoffAddress = order.dropoff?.address || order.dropoff_address || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
  
  document.getElementById('orderPickupName').textContent = pickupName;
  document.getElementById('orderDropoffAddress').textContent = dropoffAddress;
  document.getElementById('orderDistance').textContent = `${order.distance_km} –∫–º`;
  document.getElementById('orderTime').textContent = `~${Math.ceil(order.timer_seconds / 60)} –º–∏–Ω`;
  document.getElementById('orderAmount').textContent = `$${order.amount}`;
  
  console.log('üì¶ Order modal updated:', { pickupName, dropoffAddress });
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫–∞–∑–∞
 */
function closeOrderModal() {
  const modal = document.getElementById('orderModal');
  if (modal) {
    modal.style.display = 'none';
  }
  
  // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–∫–∞–∑–∞
  clearOrderMarkers();
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
  if (gameState.isOnShift && !gameState.currentOrder) {
    startSearching();
  }
}

/**
 * –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
 */
async function acceptOrder() {
  if (!gameState.currentOrder) {
    console.error("‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è");
    return;
  }
  
  try {
    console.log("‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑:", gameState.currentOrder.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch('/api/order/accept', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: gameState.userId,
        order_id: gameState.currentOrder.id
      })
    });
    
    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑');
    }
    
    const result = await response.json();
    console.log("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:", result);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    closeOrderModal();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    const button = document.getElementById("startGame");
    const buttonText = button.querySelector("h3");
    if (buttonText) {
      buttonText.textContent = "–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É";
      button.style.backgroundColor = "#007cbf";
    }
    
    showSuccess("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:", error);
    showError("–û—à–∏–±–∫–∞: " + error.message);
  }
}

// === Modal System ===

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 */
function initializeModals() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
  const profileButton = document.getElementById("profileButton");
  if (profileButton) {
    profileButton.addEventListener("click", () => {
      openModal("profileModal");
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  document.querySelectorAll("#gameSettingsButton").forEach(btn => {
    btn.addEventListener("click", () => {
      openModal("settingsModal");
    });
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
  document.querySelectorAll(".close").forEach(el => {
    el.addEventListener("click", () => {
      const modalId = el.dataset.close;
      if (modalId) {
        closeModal(modalId);
      }
    });
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
  window.addEventListener("click", (e) => {
    if (e.target.classList.contains("modal")) {
      e.target.style.display = "none";
    }
  });
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function openModal(id) {
  const modal = document.getElementById(id);
  if (modal) {
    modal.style.display = "flex";
  }
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function closeModal(id) {
  const modal = document.getElementById(id);
  if (modal) {
    modal.style.display = "none";
  }
}

// === Notification System ===

/**
 * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
 */
function showSuccess(message) {
  showNotification(message, 'success');
}

/**
 * –ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
 */
function showWarning(message) {
  showNotification(message, 'warning');
}

/**
 * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
 */
function showError(message) {
  showNotification(message, 'error');
}

/**
 * –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  
  // –°—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const styles = {
    info: { bg: '#007cbf', icon: '‚ÑπÔ∏è' },
    success: { bg: '#00aa44', icon: '‚úÖ' },
    warning: { bg: '#ff8800', icon: '‚ö†Ô∏è' },
    error: { bg: '#ff4444', icon: '‚ùå' }
  };
  
  const style = styles[type] || styles.info;
  
  notification.style.cssText = `
    position: fixed;
    top: 80px;
    left: 50%;
    transform: translateX(-50%);
    background: ${style.bg};
    color: white;
    padding: 12px 20px;
    border-radius: 12px;
    z-index: 10000;
    font-family: Inter, sans-serif;
    font-weight: 500;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    max-width: calc(100vw - 40px);
  `;
  
  notification.textContent = `${style.icon} ${message}`;
  document.body.appendChild(notification);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  notification.style.opacity = '0';
  notification.style.transform = 'translateX(-50%) translateY(-20px)';
  
  requestAnimationFrame(() => {
    notification.style.transition = 'all 0.3s ease';
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(-50%) translateY(0)';
  });
  
  // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(-50%) translateY(-20px)';
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 4000);
}

// === Global Functions (–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ window) ===

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.openModal = openModal;
window.closeModal = closeModal;
window.closeOrderModal = closeOrderModal;
window.acceptOrder = acceptOrder;
// === –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ localStorage
 */
function saveGameState() {
  const stateToSave = {
    isOnShift: gameState.isOnShift,
    isSearching: gameState.isSearching,
    userId: gameState.userId,
    currentOrder: gameState.currentOrder,
    lastSaved: Date.now()
  };
  
  localStorage.setItem('courierGameState', JSON.stringify(stateToSave));
  console.log("üíæ Game state saved");
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏–∑ localStorage  
 */
function restoreGameState() {
  try {
    const savedState = localStorage.getItem('courierGameState');
    if (!savedState) return false;
    
    const state = JSON.parse(savedState);
    const timeDiff = Date.now() - state.lastSaved;
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (timeDiff > 4 * 60 * 60 * 1000) {
      localStorage.removeItem('courierGameState');
      return false;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.isOnShift = state.isOnShift;
    gameState.isSearching = state.isSearching;  
    gameState.currentOrder = state.currentOrder;
    gameState.userId = state.userId || 1;
    
    console.log("ÔøΩÔøΩ Game state restored:", state);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    if (gameState.isOnShift) {
      if (gameState.isSearching) {
        updateShiftButton(SHIFT_STATES.SEARCHING);
      } else if (gameState.currentOrder) {
        const button = document.getElementById("startGame");
        const buttonText = button.querySelector("h3");
        if (buttonText) {
          buttonText.textContent = "–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É";
          button.style.backgroundColor = "#007cbf";
        }
      } else {
        updateShiftButton(SHIFT_STATES.END_SHIFT);
      }
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SocketIO
      if (window.__socket && geoManager.currentPosition) {
        window.__socket.emit('user_login', { user_id: gameState.userId });
        
        // –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º
        if (gameState.isSearching) {
          setTimeout(() => {
            startSearching();
          }, 1000);
        }
      }
    }
    
    return true;
  } catch (error) {
    console.error("‚ùå Error restoring game state:", error);
    localStorage.removeItem('courierGameState');
    return false;
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener("DOMContentLoaded", () => {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ...
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  setTimeout(() => {
    const restored = restoreGameState();
    if (restored) {
      console.log("‚úÖ Previous session restored");
    }
  }, 1000);
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
function updateGameState() {
  saveGameState();
}

// === –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ===

// –°–ª—É—à–∞–µ–º –≤—Å–µ SocketIO —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (window.__socket) {
  window.__socket.onAny((eventName, ...args) => {
    console.log(`üîå SocketIO Event: ${eventName}`, args);
  });
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è order_found
  window.__socket.on('order_found', (data) => {
    console.log('üéØ order_found event received!', data);
    if (data && data.order) {
      console.log('üì¶ Order data:', data.order);
      console.log('üè™ Pickup:', data.order.pickup);
      console.log('üè† Dropoff:', data.order.dropoff);
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è order_found
if (typeof onOrderFound === 'undefined') {
  function onOrderFound(data) {
    console.log("‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:", data.order);
    
    gameState.currentOrder = data.order;
    gameState.isSearching = false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ
    showOrderOnMap(data.order);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–∫–∞–∑–æ–º
    showOrderModal(data.order);
    
    saveGameState();
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ SocketIO –¥–æ—Å—Ç—É–ø–µ–Ω
  if (window.__socket) {
    window.__socket.on('order_found', onOrderFound);
  }
}
