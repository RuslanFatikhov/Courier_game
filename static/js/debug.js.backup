/**
 * Debug —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã
 * ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è development!
 */

class DebugPanel {
  constructor() {
    this.panel = null;
    this.isVisible = false;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ debug –ø–∞–Ω–µ–ª–∏
  create() {
    this.panel = document.createElement('div');
    this.panel.id = 'debugPanel';
    this.panel.innerHTML = `
      <div style="
        position: fixed;
        bottom: 120px;
        right: 12px;
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 16px;
        border-radius: 12px;
        z-index: 1000;
        font-family: monospace;
        font-size: 12px;
        min-width: 300px;
        display: none;
      ">
        <h4 style="margin: 0 0 12px 0; color: #ff6600;">ÔøΩÔøΩÔ∏è DEBUG PANEL</h4>
        
        <div style="margin-bottom: 12px;">
          <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong>
          <div>GPS: <span id="debugGPS">‚ùå</span></div>
          <div>–°–º–µ–Ω–∞: <span id="debugShift">‚ùå</span></div>
          <div>–ó–∞–∫–∞–∑: <span id="debugOrder">–ù–µ—Ç</span></div>
        </div>
        
        <div style="margin-bottom: 12px;">
          <strong>–ü–æ–∑–∏—Ü–∏—è:</strong>
          <div id="debugPosition">‚Äî</div>
        </div>
        
        <div style="margin-bottom: 12px;">
          <strong>–ó–æ–Ω—ã:</strong>
          <div>Pickup: <span id="debugPickupZone">‚ùå</span></div>
          <div>Dropoff: <span id="debugDropoffZone">‚ùå</span></div>
        </div>
        
        <div style="display: flex; gap: 8px; flex-direction: column;">
          <button id="debugTeleportPickup" style="
            padding: 8px;
            background: #00aa44;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
          ">üìç –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É</button>
          
          <button id="debugTeleportDropoff" style="
            padding: 8px;
            background: #9b59b6;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
          ">üè† –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(this.panel);
    this.attachEventListeners();
    this.startUpdating();
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  attachEventListeners() {
    // –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    document.getElementById('debugTeleportPickup').addEventListener('click', async () => {
      await this.teleportToPickup();
    });
    
    // –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É
    document.getElementById('debugTeleportDropoff').addEventListener('click', async () => {
      await this.teleportToDropoff();
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
  toggle() {
    this.isVisible = !this.isVisible;
    const panel = this.panel.querySelector('div');
    panel.style.display = this.isVisible ? 'block' : 'none';
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  startUpdating() {
    setInterval(() => {
      this.updateInfo();
    }, 1000);
  }

  updateInfo() {
    if (!this.isVisible) return;
    
    // GPS —Å—Ç–∞—Ç—É—Å
    const gpsEl = document.getElementById('debugGPS');
    if (gpsEl) {
      gpsEl.textContent = window.geoManager?.currentPosition ? '‚úÖ' : '‚ùå';
    }
    
    // –°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
    const shiftEl = document.getElementById('debugShift');
    if (shiftEl && window.gameState) {
      shiftEl.textContent = window.gameState.isOnShift ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ –Ω–∞—á–∞—Ç–∞';
    }
    
    // –ó–∞–∫–∞–∑
    const orderEl = document.getElementById('debugOrder');
    if (orderEl && window.gameState) {
      const order = window.gameState.currentOrder;
      if (order) {
        orderEl.textContent = `#${order.id} (${order.status})`;
      } else {
        orderEl.textContent = '–ù–µ—Ç';
      }
    }
    
    // –ü–æ–∑–∏—Ü–∏—è
    const posEl = document.getElementById('debugPosition');
    if (posEl && window.geoManager?.currentPosition) {
      const pos = window.geoManager.getCurrentPosition();
      posEl.textContent = `${pos.lat.toFixed(6)}, ${pos.lng.toFixed(6)}`;
    }
  }

  // –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
  async teleportToPickup() {
    try {
      const response = await fetch('/api/debug/teleport_to_pickup', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({user_id: window.gameState.userId})
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log('‚úÖ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É:', result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ
        if (window.mapManager) {
          const pos = result.position;
          window.mapManager.setView({longitude: pos.lng, latitude: pos.lat}, 18);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–Ω—ã –≤ UI
        this.updateZones(result.zones);
        
        alert(`‚úÖ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫ ${result.message.split('–∫ ')[1]}\n\n–í –∑–æ–Ω–µ pickup: ${result.zones.in_pickup_zone ? '–î–ê' : '–ù–ï–¢'}`);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
      }
    } catch (e) {
      alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏: ' + e.message);
    }
  }

  // –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É
  async teleportToDropoff() {
    try {
      const response = await fetch('/api/debug/teleport_to_dropoff', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({user_id: window.gameState.userId})
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log('‚úÖ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É:', result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ
        if (window.mapManager) {
          const pos = result.position;
          window.mapManager.setView({longitude: pos.lng, latitude: pos.lat}, 18);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–Ω—ã –≤ UI
        this.updateZones(result.zones);
        
        alert(`‚úÖ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫ ${result.message.split('–∫ ')[1]}\n\n–í –∑–æ–Ω–µ dropoff: ${result.zones.in_dropoff_zone ? '–î–ê' : '–ù–ï–¢'}`);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
      }
    } catch (e) {
      alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏: ' + e.message);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–∞—Ö
  updateZones(zones) {
    const pickupEl = document.getElementById('debugPickupZone');
    const dropoffEl = document.getElementById('debugDropoffZone');
    
    if (pickupEl) {
      pickupEl.textContent = zones.in_pickup_zone ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢';
    }
    
    if (dropoffEl) {
      dropoffEl.textContent = zones.in_dropoff_zone ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢';
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.debugPanel = new DebugPanel();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ development —Ä–µ–∂–∏–º–µ
if (location.hostname === 'localhost' || location.hostname === '127.0.0.1') {
  document.addEventListener('DOMContentLoaded', () => {
    window.debugPanel.create();
  });
  
  // –•–æ—Ç–∫–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏: Ctrl+Shift+D
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.shiftKey && e.key === 'D') {
      window.debugPanel.toggle();
    }
  });
  
  console.log('üõ†Ô∏è Debug –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+D –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è');
}
