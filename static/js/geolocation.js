// static/js/geolocation.js

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –≤ –∫—É—Ä—å–µ—Ä—Å–∫–æ–º —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é GPS
 */

class GeolocationManager {
  constructor() {
    this.watchId = null;
    this.currentPosition = null;
    this.isTracking = false;
    this.onPositionUpdate = null;
    this.onPermissionGranted = null;
    this.onPermissionDenied = null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
   * @returns {boolean} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
   */
  isSupported() {
    return 'geolocation' in navigator;
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
   * @returns {Promise<Position>} –ü—Ä–æ–º–∏—Å —Å –ø–æ–∑–∏—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async requestPermission() {
    if (!this.isSupported()) {
      throw new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
    }

    return new Promise((resolve, reject) => {
      // –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ GPS
      const options = {
        enableHighAccuracy: true,
        timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        maximumAge: 60000 // –ö—ç—à –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 1 –º–∏–Ω—É—Ç—É
      };

      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('‚úÖ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', position);
          this.currentPosition = position;
          
          // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (this.onPermissionGranted) {
            this.onPermissionGranted(position);
          }
          
          resolve(position);
        },
        (error) => {
          console.error('‚ùå GPS –æ—à–∏–±–∫–∞:', error);
          
          // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (this.onPermissionDenied) {
            this.onPermissionDenied(error);
          }
          
          reject(error);
        },
        options
      );
    });
  }

  /**
   * –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Function} callback –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
   */
  startTracking(callback) {
    if (!this.isSupported()) {
      console.error('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return false;
    }

    if (this.isTracking) {
      console.log('‚ö†Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ');
      return true;
    }

    const options = {
      enableHighAccuracy: true,
      timeout: 30000,
      maximumAge: 5000 // –û–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    };

    this.watchId = navigator.geolocation.watchPosition(
      (position) => {
        this.currentPosition = position;
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', position.coords);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å GPS
        const accuracy = position.coords.accuracy;
        if (accuracy > 100) {
          console.warn('‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å GPS:', accuracy, '–º–µ—Ç—Ä–æ–≤');
        }

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (callback) {
          callback(position);
        }

        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—â–∏–π callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (this.onPositionUpdate) {
          this.onPositionUpdate(position);
        }
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è GPS:', error);
        this.handleGeolocationError(error);
      },
      options
    );

    this.isTracking = true;
    console.log('üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ GPS –Ω–∞—á–∞–ª–æ—Å—å');
    return true;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
   */
  stopTracking() {
    if (this.watchId !== null) {
      navigator.geolocation.clearWatch(this.watchId);
      this.watchId = null;
      this.isTracking = false;
      console.log('üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ GPS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
   * @returns {Object|null} –û–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ null
   */
  getCurrentPosition() {
    if (!this.currentPosition) return null;

    const coords = this.currentPosition.coords;
    return {
      lat: coords.latitude,
      lng: coords.longitude,
      accuracy: coords.accuracy,
      timestamp: this.currentPosition.timestamp
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ GPS —Å–∏–≥–Ω–∞–ª–∞
   * @returns {string} –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: excellent, good, fair, poor
   */
  getGPSQuality() {
    if (!this.currentPosition) return 'unknown';

    const accuracy = this.currentPosition.coords.accuracy;
    
    if (accuracy <= 5) return 'excellent';
    if (accuracy <= 15) return 'good';
    if (accuracy <= 50) return 'fair';
    return 'poor';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   * @param {GeolocationPositionError} error –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   */
  handleGeolocationError(error) {
    let message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ GPS';
    
    switch(error.code) {
      case error.PERMISSION_DENIED:
        message = '–î–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω';
        break;
      case error.POSITION_UNAVAILABLE:
        message = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        break;
      case error.TIMEOUT:
        message = '–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è';
        break;
    }
    
    console.error('GPS Error:', message, error);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    this.showGPSError(message);
  }

  /**
   * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ GPS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  showGPSError(message) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: #ff4444;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      z-index: 10000;
      font-family: Inter, sans-serif;
    `;
    notification.textContent = `üö´ ${message}`;
    
    document.body.appendChild(notification);
    
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ç–æ—á–∫–∏
   * @param {number} targetLat –®–∏—Ä–æ—Ç–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
   * @param {number} targetLng –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏  
   * @param {number} radiusMeters –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
   * @returns {boolean} –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
   */
  isWithinRadius(targetLat, targetLng, radiusMeters) {
    if (!this.currentPosition) return false;

    const userPos = this.getCurrentPosition();
    const distance = this.calculateDistance(
      userPos.lat, userPos.lng,
      targetLat, targetLng
    );

    return distance <= radiusMeters;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)
   * @param {number} lat1 –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
   * @param {number} lng1 –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
   * @param {number} lat2 –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
   * @param {number} lng2 –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
   * @returns {number} –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
   */
  calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = this.toRadians(lat2 - lat1);
    const dLng = this.toRadians(lng2 - lng1);
    
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *
              Math.sin(dLng/2) * Math.sin(dLng/2);
              
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return R * c;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
   * @param {number} degrees –ì—Ä–∞–¥—É—Å—ã
   * @returns {number} –†–∞–¥–∏–∞–Ω—ã
   */
  toRadians(degrees) {
    return degrees * (Math.PI/180);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.GeolocationManager = GeolocationManager;