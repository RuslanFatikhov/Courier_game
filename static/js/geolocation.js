// static/js/geolocation.js

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –≤ –∫—É—Ä—å–µ—Ä—Å–∫–æ–º —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é GPS
 */

class GeolocationManager {
  constructor() {
    this.watchId = null;
    this.currentPosition = null;
    this.isTracking = false;
    this.onPositionUpdate = null;
    this.onPermissionGranted = null;
    this.onPermissionDenied = null;
    
    // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS –≤ localStorage
    this.GPS_PERMISSION_KEY = 'gps_permission_granted';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
   * @returns {boolean} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
   */
  isSupported() {
    return 'geolocation' in navigator;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Ä–∞–Ω–µ–µ –¥–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ GPS
   * @returns {boolean} –ë—ã–ª–æ –ª–∏ –¥–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
   */
  hasStoredPermission() {
    const stored = localStorage.getItem(this.GPS_PERMISSION_KEY);
    return stored === 'true';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS
   * @param {boolean} granted –î–∞–Ω–æ –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
   */
  savePermissionStatus(granted) {
    localStorage.setItem(this.GPS_PERMISSION_KEY, granted.toString());
    console.log(`üíæ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${granted}`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–∞)
   */
  clearPermissionStatus() {
    localStorage.removeItem(this.GPS_PERMISSION_KEY);
    console.log('üóëÔ∏è GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
   * @param {boolean} skipIfGranted –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–∞–Ω–æ
   * @returns {Promise<Position>} –ü—Ä–æ–º–∏—Å —Å –ø–æ–∑–∏—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async requestPermission(skipIfGranted = true) {
    if (!this.isSupported()) {
      throw new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
    }

    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–∞–Ω–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ skipIfGranted,
    // –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞
    if (skipIfGranted && this.hasStoredPermission()) {
      console.log('‚úÖ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–∞–Ω–æ —Ä–∞–Ω–µ–µ');
      
      return new Promise((resolve, reject) => {
        const options = {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        };

        navigator.geolocation.getCurrentPosition(
          (position) => {
            this.currentPosition = position;
            console.log('üìç GPS –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)');
            
            if (this.onPermissionGranted) {
              this.onPermissionGranted(position);
            }
            
            resolve(position);
          },
          (error) => {
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–∑–≤–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            console.error('‚ùå GPS –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
            if (error.code === error.PERMISSION_DENIED) {
              this.savePermissionStatus(false);
            }
            
            if (this.onPermissionDenied) {
              this.onPermissionDenied(error);
            }
            
            reject(error);
          },
          options
        );
      });
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ
    return new Promise((resolve, reject) => {
      const options = {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      };

      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('‚úÖ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', position);
          this.currentPosition = position;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
          this.savePermissionStatus(true);
          
          if (this.onPermissionGranted) {
            this.onPermissionGranted(position);
          }
          
          resolve(position);
        },
        (error) => {
          console.error('‚ùå GPS –æ—à–∏–±–∫–∞:', error);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–∞–∑
          if (error.code === error.PERMISSION_DENIED) {
            this.savePermissionStatus(false);
          }
          
          if (this.onPermissionDenied) {
            this.onPermissionDenied(error);
          }
          
          reject(error);
        },
        options
      );
    });
  }

  /**
   * –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Function} callback –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
   */
  startTracking(callback) {
    if (!this.isSupported()) {
      console.error('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return false;
    }

    if (this.isTracking) {
      console.log('‚ö†Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ');
      return true;
    }

    const options = {
      enableHighAccuracy: true,
      timeout: 30000,
      maximumAge: 5000
    };

    this.watchId = navigator.geolocation.watchPosition(
      (position) => {
        this.currentPosition = position;
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', position.coords);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å GPS
        const accuracy = position.coords.accuracy;
        if (accuracy > 100) {
          console.warn('‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å GPS:', accuracy, '–º–µ—Ç—Ä–æ–≤');
        }

        if (callback) {
          callback(position);
        }

        if (this.onPositionUpdate) {
          this.onPositionUpdate(position);
        }
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è GPS:', error);
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if (error.code === error.PERMISSION_DENIED) {
          this.savePermissionStatus(false);
        }
        
        this.handleGeolocationError(error);
      },
      options
    );

    this.isTracking = true;
    console.log('üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ GPS –Ω–∞—á–∞–ª–æ—Å—å');
    return true;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
   */
  stopTracking() {
    if (this.watchId !== null) {
      navigator.geolocation.clearWatch(this.watchId);
      this.watchId = null;
      this.isTracking = false;
      console.log('üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ GPS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
   * @returns {Object|null} –û–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ null
   */
  getCurrentPosition() {
    if (!this.currentPosition) return null;

    const coords = this.currentPosition.coords;
    return {
      lat: coords.latitude,
      lng: coords.longitude,
      accuracy: coords.accuracy,
      timestamp: this.currentPosition.timestamp
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ GPS —Å–∏–≥–Ω–∞–ª–∞
   * @returns {string} –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: excellent, good, fair, poor
   */
  getGPSQuality() {
    if (!this.currentPosition) return 'unknown';

    const accuracy = this.currentPosition.coords.accuracy;
    
    if (accuracy <= 5) return 'excellent';
    if (accuracy <= 15) return 'good';
    if (accuracy <= 50) return 'fair';
    return 'poor';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   * @param {GeolocationPositionError} error –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   */
  handleGeolocationError(error) {
    let message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ GPS';
    
    switch(error.code) {
      case error.PERMISSION_DENIED:
        message = '–î–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω';
        break;
      case error.POSITION_UNAVAILABLE:
        message = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        break;
      case error.TIMEOUT:
        message = '–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è';
        break;
    }
    
    console.error('GPS Error:', message, error);
    
    this.showGPSError(message);
  }

  /**
   * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ GPS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  showGPSError(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: #ff4444;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      z-index: 10000;
      font-family: Inter, sans-serif;
    `;
    notification.textContent = `üö´ ${message}`;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ç–æ—á–∫–∏
   * @param {number} targetLat –®–∏—Ä–æ—Ç–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
   * @param {number} targetLng –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏  
   * @param {number} radiusMeters –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
   * @returns {boolean} –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
   */
  isWithinRadius(targetLat, targetLng, radiusMeters) {
    if (!this.currentPosition) return false;

    const userPos = this.getCurrentPosition();
    const distance = this.calculateDistance(
      userPos.lat, userPos.lng,
      targetLat, targetLng
    );

    return distance <= radiusMeters;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)
   * @param {number} lat1 –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
   * @param {number} lng1 –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
   * @param {number} lat2 –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
   * @param {number} lng2 –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
   * @returns {number} –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
   */
  calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = this.toRadians(lat2 - lat1);
    const dLng = this.toRadians(lng2 - lng1);
    
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *
              Math.sin(dLng/2) * Math.sin(dLng/2);
              
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return R * c;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
   * @param {number} degrees –ì—Ä–∞–¥—É—Å—ã
   * @returns {number} –†–∞–¥–∏–∞–Ω—ã
   */
  toRadians(degrees) {
    return degrees * (Math.PI/180);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.GeolocationManager = GeolocationManager;
